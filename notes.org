#+TITLE: Book Notes for Fundamentals of Data Engineering

* 1. Data Engineering Described

The data engineering lifecycle:


#+DOWNLOADED: screenshot @ 2024-11-10 17:23:05
[[file:1._Data_Engineering_Described/2024-11-10_17-23-05_screenshot.png]]


- generation
- storage
- ingestion
- transformation
- serving

* 2. The Data Engineering Lifecycle

** Storage

Often the most difficult part of the data lifecycle.

*** Key Engineering Considerations

- compatible read / write speeds?
- will it create a bottleneck downstream?
- Do we understand how this works? Are we using this optimally or
  committing unnatural acts? (consider databricks for running python
  scripts.)
- will it handle expected future scale needs?
- will downstream users be able to access it?
- are we able to capture metadata about schema evolution, data flows,
  data lineage, and so forth?
- is it purely storage, or does it support complex query patterns?
- is it schema-agnostic (object storage)? flexible schema (cassandra
  db)? enforced schema (a cloud data warehouse)?
- how are we tracking master data, golden records data quality, and
  data lineage for data governance?
- how are we handling regulatory compliance and data sovereignty?

** Ingestion

Once we understand the data source, we need to gather data. The next
stage is data ingestion from source systems.

*** Key Engineering Considerations

- What are the use cases for the data we're ingesting? Can I reuse
  this data rather than create multiple versions of the same dataset
- Are the systems generating and ingesting this data reliably? Is the
  data available when I need it?
- What is the data destination after ingestion?
- How frequently will I need to access the data?
- In what volume will the data typically arrive?
- What format is the data in? My can storage and transformation
  systems use this format?

** Transformation

Data needs to be transforamed from it's original form into something
useful for downstream use cases.

*** Key Engineering Considerations

- What's the cost and ROI of the transformation?
- Is the transformation as simple and self-isolated as possible?
- What business rules do the transformations support?

** Serving Data

This is where we get value from our data.

Maybe we consider reverse ETL as well?


** Undercurrents


#+DOWNLOADED: screenshot @ 2024-11-11 13:38:07
[[file:2._The_Data_Engineering_Lifecycle/2024-11-11_13-38-07_screenshot.png]]

Data Management Body of Knowledge identifies 4 main categories of
metadata that are useful to data engineers:

- business
- technical
- operational
- reference

** DataOps

DataOps has 3 core technical elements:

#+DOWNLOADED: screenshot @ 2024-11-11 13:52:33
[[file:2._The_Data_Engineering_Lifecycle/2024-11-11_13-52-33_screenshot.png]]


* 3. Designing Good Data Architecture

> Enterprise architecture is the design of systems to support change
  in the enterprise, achieved by flexible and reversible decisions
  reached through careful evaluation of trade-offs.

> technical solutions exist not for their own sake but in support of
  business goals

*Operational architecture* encompasses the functional requirements of
what needs to happen related to people, processes, and technology. For
example, what business process does the data serve?

*Technical architecture* outlines how data is ingested, stored,
transformed, and served alongside the data engineering lifecycle.


#+BEGIN_QUOTE
Never shoot for the best architecture, but rather the least worst
architecture - Mark Richards and Neal Ford
#+END_QUOTE


** Principles of Good Data Architecture

1. Choose common components wisely.
2. Plan for failure.
3. Architect for scalability.
4. Architecture is leadership.
5. Always be architecting.
6. Build loosely coupled systems.
7. Make reversible decisions.
8. Prioritize security.
9. Embrace FinOps.

** Examples and Types of Data Architecture
*** Data Warehouse
a subject-oriented, integrated, non-volatile, and time-variant
collection of data in support of management's decisions.


The organizational data warehouse architecture has 2 main
characteristics:
- separates online analytical processing (OLAP) from production
  databases (OLTP)
- centralizes and organizes data

*** Data Mart

A data mart is a more refined subset of a warehouse designed to serve
analytics and reporting, focused on a single sub-organization,
department, or line of business.

*** Data Lake

Instead of imposing tight structural limitations on data, just dump it
into a central location.

*** Modern Data Stack


#+DOWNLOADED: screenshot @ 2024-11-12 17:20:47
[[file:3._Designing_Good_Data_Architecture/2024-11-12_17-20-47_screenshot.png]]
